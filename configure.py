# pylint: skip-file

import re
import atoml
import subprocess
from pathlib import Path
from inspect import getmembers, isfunction
from atoml.api import table

from shellfuncs import functions


def pdm_to_setup(version=None) -> str:
    """
    Generate the setup.py code from pyproject.toml using PDM (PEP621) metadata.

    Arguments:
        version: The version to use.

    Returns:
        The code of setup.py.
    """
    process = subprocess.run(["pdm", "export", "-f", "setuppy"], stdout=subprocess.PIPE)
    setup = process.stdout.decode("utf8")
    setup = setup.replace("'console_scripts'", '"console_scripts"')
    return kwargs_to_args(setup, "pdm", version)


def pdm_to_requirements() -> str:
    """Generate the requirements.txt from pyproject.toml config file

    Returns:
        The requirements.txt file as a string.
    """
    process = subprocess.run(
        ["pdm", "export", "-f", "requirements", "--without-hashes"], stdout=subprocess.PIPE
    )
    return process.stdout.decode("utf-8")


def kwargs_to_args(code: str, manager: str, version: str = None) -> str:
    """
    Apply some transformations to the code of setup.py.

    Arguments:
        code: The code of setup.py.
        manager: The project management tool.
        version: The version to use.

    Returns:
        The transformed code.
    """
    # Hack to make it work in CI, because they expect to see name= and version= to replace their values.
    # This code changes setup_kwargs = {...}; setup(**setup_kwargs) to a direct setup(...)
    code = code.replace("\nsetup(**setup_kwargs)", "").rstrip()
    code = code.replace("setup_kwargs = {", "setup(")
    code = re.sub(r" {4}'(\w+)': ", r"    \1=", code)
    code = code[:-1] + ")\n"
    if version:
        code = re.sub(r"version='.*'", f"version='{version}'", code)
    return code + f"\n# This setup.py was autogenerated using {manager}.\n"


def build_funcs():
    pyproject_path = Path("pyproject.toml")
    pyproject = atoml.load(pyproject_path.open("r"))
    function_list = getmembers(functions, isfunction)

    if "project" not in pyproject:
        pyproject["project"] = table()

    pyproject["project"]["scripts"] = table()  # type: ignore

    for function in function_list:
        if function[0].startswith("_"):
            continue
        pyproject["project"]["scripts"][function[0]] = f"shellfuncs.functions:{function[0]}"  # type: ignore

    atoml.dump(pyproject, pyproject_path.open("w"))  # type: ignore


def main():
    build_funcs()

    setup = pdm_to_setup()
    requirements = pdm_to_requirements()
    setup_path = Path("setup.py")
    requirements_path = Path("requirements.txt")

    if setup:
        setup_path.write_text(setup)

    if requirements:
        requirements_path.write_text(requirements)


if __name__ == "__main__":
    main()
